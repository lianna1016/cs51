--- a/ps1/ps1.ml
+++ b/ps1/ps1.ml
@@ -19,7 +19,7 @@
 
 (*>* Problem 1c *>*)
 
-let prob1c : ((int option) * bool)   = ((None, Some 42.0), true) ;;
+let prob1c : ((int option) * bool) = ((Some 42), true) ;;
 
 
 (* Explain in a comment why the following will not type check,


@@ -122,18 +122,29 @@
 (* Here is its prototype/signature: *)
 (* reversed : int list -> bool *)
 
-let rec reversed (x: int list): bool = 
-  match x with 
-  | [] -> true
-  | xhd::[]-> true
-  | xhd::xtl ->
-    xhd >= xtl 
-;;
 
 (* Implement reversed below, and be sure to write tests for it (see 3b for
  * examples of tests). *)
 
+let rec reversed (x: int list): bool = 
+   let rec compare (xhd:int) (xtl:int list) =
+       match xtl with 
+       | nhd::ntl -> if xhd >= nhd then compare nhd ntl else false 
+       | [] -> true in
+   match x with 
+   | [] -> true
+   | hd::[] -> true
+   | hd::tl -> compare hd tl
+;;
 
+assert ((reversed []) = true) ;;
+assert ((reversed [1]) = true) ;;
+assert ((reversed [-1]) = true) ;;
+assert ((reversed [3;2;1]) = true) ;;
+assert ((reversed [3;2;4]) = false) ;;
+assert ((reversed [2;45;37]) = false) ;;
+assert ((reversed [72;-5;-88]) = true) ;;
+
 (*>* Problem 3b *>*)
 
 (* merge xs ys takes two integer lists, each sorted in increasing order,
@@ -161,7 +172,10 @@
       yhd::(merge x ytl)
 ;;
 
-(*
+assert ((merge [1] [1]) = [1;1]) ;;
+assert ((merge [] [-1]) = [-1]) ;;
+assert ((merge [-5;-4;-3;-2;-1] [-3]) = [-5;-4;-3;-3;-2;-1]) ;;
+
 (* sample tests *)
 assert ((merge [1;2;3] [4;5;6;7]) = [1;2;3;4;5;6;7]) ;;
 assert ((merge [4;5;6;7] [1;2;3]) = [1;2;3;4;5;6;7]) ;;
@@ -173,7 +187,6 @@
 assert ((merge [1] []) = [1]) ;;
 assert ((merge [] [-1]) = [-1]) ;;
 assert ((merge [1] [-1]) = [-1;1]) ;;
-*)
 
 
 (*>* Problem 3c *>*)
@@ -192,7 +205,6 @@
 let rec unzip (l: (int * int) list) : (int list)*(int list) = 
   match l with 
   | [] -> ([], [])
-  (*| (x, y)::[] -> (x::[], y::[])*)
   | (x, y)::tl -> 
     match unzip tl with 
     | ([], []) -> (x::[], y::[])

@@ -201,10 +213,12 @@
 
 assert ((unzip []) = ([], [])) ;;
 assert ((unzip [(1, 1)]) = ([1], [1])) ;;
-assert ((unzip [(4, 14); (-5, 6)]) = ([4;-5], [14;6]));;
-assert ((unzip [(4, 8); (5, 6); (52, 7)]) = ([4;5;52], [8;6;7]));;
+assert ((unzip [(1, 0); (-8, 10); (11, -14)]) = ([1; -8; 11], [0; 10; -14])) ;;
+assert ((unzip [(4, 14); (-5, 6)]) = ([4;-5], [14;6])) ;;
+assert ((unzip [(4, 8); (5, 6); (52, 7)]) = ([4;5;52], [8;6;7])) ;;
 assert ((unzip [(1, -1)]) = ([1], [-1])) ;;
 
+
 (*>* Problem 3d *>*)
 
 (* variance lst should be a function that returns None if lst has fewer than 2


@@ -245,14 +259,12 @@
   | xhd::xtl -> Some (1. /.((length x)-.1.) *. (calc x (mean x)))
 ;;
 
-
 assert ((variance []) = None) ;;
-variance [1.] ;;
-variance [1.; 1.] ;;
-variance [10.; 10.; 10.] ;;
-variance [57.6; -100.; 2000.] ;;
 assert ((variance [1.]) = None) ;;
 assert ((variance [-1.]) = None) ;;
+assert ((variance [10.; 10.; 10.]) = Some 0.) ;;
+assert ((variance [1.; 2.]) = Some 0.5) ;;
+assert ((variance [57.6; -100.; 2000.]) = Some 1367959.25333333341) ;;
 
 (*>* Problem 3e *>*)
 


@@ -269,28 +281,26 @@
 (* The type signature for few_divisors is: *)
 (* few_divisors : int -> int -> bool *)
 
-let rec few_divisors (n:int) (m:int): bool =
-  if n = 0 then true else if m > n then false 
-  (*every number has at least 2 divisors *) 
-  let v = 1 in 
-  let divisors (d: int): int = v + d in
-  (* start checking if something is divisible by 2 *) 
-  let rec find_divs (a: int) (n: int) (m:int): int = 
+let few_divisors (n:int) (m:int): bool =
+  let rec divide (x: int) (y:int): bool = 
+    match x with 
+    | 0 -> if y > 0 then true else false
+    | _ -> if n mod x = 0 then divide (x-1) (y-1) else divide (n-1) y 
+in
   match n with 
-  | n -> divisors 1 
-  | _ -> n mod a
-  in 
-  let is_div (n: int) (m:int): bool = 
-     if (find_divs 2 n m) > m then true else false 
-  in
-  match m with 
-  | 0 -> true
-  | 1 -> true
-  | 2 -> true
-  | _ -> (is_div n m)
+  | 0 -> false
+  | _ -> if n < m then true else divide n m
 ;;
 
 
+assert((few_divisors 0 1000) = false) ;;
+assert((few_divisors 10 9) = true) ;;
+assert((few_divisors 11 42) = true) ;;
+assert((few_divisors 0 0) = false) ;; 
+assert((few_divisors 17 2) = true) ;;
+assert((few_divisors 56 7) = false) ;;
+
+
 (*>* Problem 3f *>*)
 
 (* concat_list sep lst should take a list of strings and return one big
@@ -316,6 +326,13 @@
   | hd::tl -> hd^sep^(concat_list sep tl)
 ;;
 
+assert((concat_list ", " ["Greg"; "Anna"; "David"]) = "Greg, Anna, David") ;;
+assert((concat_list "..." ["Moo"; "Baaa"; "Quack"]) = "Moo...Baaa...Quack") ;;
+assert((concat_list ", " []) = "") ;;
+assert((concat_list ", " ["Moo"]) = "Moo") ;;
+assert((concat_list " and " ["Emi"; "Anastasiya"; "Jane"; "Maria"; "Diane"]) = "Emi and Anastasiya and Jane and Maria and Diane") ;;
+assert((concat_list " elk, " ["big"; "little"; "strong"; "fast"; ""; ""; ""; "the best animal!"]) = "big elk, little elk, strong elk, fast elk,  elk,  elk,  elk, the best animal!") ;;
+
 (*>* Problem 3g *>*)
 
 (* One way to compress a list of characters is to use run-length encoding.
@@ -336,6 +353,33 @@
 (* The type signatures for to_run_length and from_run_length are: *)
 (* to_run_length : char list -> (int * char) list *)
 (* from_run_length : (int * char) list -> char list *)
+
+let rec to_run_length (x: char list): (int * char) list = 
+  let rec compress (l: char list) (c: char) (i: int): (int*char)list =
+    match l with
+    | [] -> (i, c)::[]
+    | hd::tl -> if hd = c then compress tl c (i+1) else (i, c)::(compress tl hd 1) in
+  match x with 
+  | [] -> [] 
+  | xhd::xtl -> compress xtl xhd 1 
+;;
+
+assert((to_run_length []) = []) ;;
+assert((to_run_length ['a']) = [(1,'a')]) ;;
+assert((to_run_length ['a'; 'a'; 'b']) = [(2,'a'); (1, 'b')]) ;;
+assert((to_run_length ['a';'a';'a';'b';'b';'b';'c';'c';'c']) = [(3,'a'); (3,'b'); (3,'c')]) ;;
+
+let rec from_run_length (x: (int*char) list): char list = 
+ match x with 
+ | [] -> [] 
+ | (0, b)::tl -> from_run_length tl 
+ | (a, b)::tl -> b::(from_run_length (((a-1), b)::tl))
+;;
+
+assert((from_run_length []) = []) ;;
+assert((from_run_length [(1, 'a')]) = ['a']) ;;
+assert((from_run_length [(2, 'a'); (1, 'b')])= ['a'; 'a'; 'b']) ;;
+assert((from_run_length [(3,'a'); (3,'b'); (3,'c')]) =  ['a';'a';'a';'b';'b';'b';'c';'c';'c']) ;;
 
 (*>* Problem 4 *>*)
 
--- a/ps2/expression.ml
+++ b/ps2/expression.ml
@@ -9,15 +9,30 @@
  * 3. Remember to test using the function "assert".
  *)
 
+
+
 (*>* Problem 2.1 *>*)
 
 (* contains_var : tests whether an expression contains a variable "x"
  *     Examples : contains_var (parse "x^4") = true
  *                contains_var (parse "4+3") = false *)
+
 let rec contains_var (e:expression) : bool =
-    raise (Failure "Not implemented")
+    match e with
+    | Var -> true
+    | Unop (a, b) -> contains_var b 
+    | Binop (c, d, f) -> contains_var d || contains_var f
+    | Num h-> false
 ;;
 
+assert((contains_var (parse "1")) = false) ;;
+assert((contains_var (parse "x")) = true) ;;
+assert((contains_var (parse "4*x")) = true) ;;
+assert((contains_var (parse "x^3")) = true) ;;
+assert((contains_var (parse "52*x^4 + 62")) = true) ;;
+assert((contains_var (parse "52*3^4 + 62")) = false) ;;
+assert((contains_var (parse "cos(x)")) = true) ;;
+assert((contains_var (parse "sin(4)")) = false) ;;
 
 
 (*>* Problem 2.2 *>*)


@@ -25,10 +40,35 @@
 (* evaluate : evaluates an expression for a particular value of x. Don't
  *            worry about handling 'divide by zero' errors.
  *  Example : evaluate (parse "x^4 + 3") 2.0 = 19.0 *)
+
 let rec evaluate (e:expression) (x:float) : float =
-    raise (Failure "Not implemented")
+    match e with
+    | Var -> x
+    | Num n -> n
+    | Unop (a, b) -> (match a with 
+      | Sin -> sin
+      | Cos -> cos
+      | Ln -> log
+      | Neg -> (fun x -> ~-. x) ) 
+        (evaluate b x)
+    | Binop (i, j, k) -> 
+      (match i with
+      | Add -> (evaluate j x) +. (evaluate k x)
+      | Mul -> (evaluate j x) *. (evaluate k x)
+      | Div -> (evaluate j x) /. (evaluate k x)
+      | Pow -> (evaluate j x) ** (evaluate k x) 
+      | Sub -> (evaluate j x) -. (evaluate k x))
 ;;
 
+assert((evaluate (parse "x") 4.) = 4.) ;;
+assert((evaluate (parse "4") 4.) = 4.) ;; 
+assert((evaluate (parse "4 + 5") 3.) = 9.) ;;
+assert((evaluate (parse "x - 4") 2.) = (-2.)) ;;
+assert((evaluate (parse "sin(2)") 4.) = (sin(2.))) ;;
+assert((evaluate (parse "sin(x)") 2.) = (sin(2.))) ;;
+assert((evaluate (parse "ln(x)") 4.) = (log 4.));;
+assert((evaluate (parse "x^4 + 3") 2.) = 19.);;
+assert((evaluate (parse "-x + 3") 4.) = 1.) ;;
 
 
 (*>* Problem 2.3 *>*)


@@ -37,12 +77,12 @@
 let rec derivative (e:expression) : expression =
     match e with
     | Num _ -> Num 0.
-    | Var -> raise (Failure "Not implemented")
+    | Var -> Num 1. 
     | Unop (u,e1) ->
         (match u with
-        | Sin -> raise (Failure "Not implemented")
+        | Sin -> Binop(Mul,Unop(Cos,e1),derivative e1)
         | Cos -> Binop(Mul,Unop(Neg,Unop(Sin,e1)),derivative e1)
-        | Ln -> raise (Failure "Not implemented")
+        | Ln -> Binop(Div, derivative e1, e1)
         | Neg -> Unop(Neg,derivative e1))
     | Binop (b,e1,e2) ->
         match b with

@@ -50,13 +90,33 @@
         | Sub -> Binop(Sub,derivative e1,derivative e2)
         | Mul -> Binop(Add,Binop(Mul,e1,derivative e2),
                         Binop(Mul,derivative e1,e2))
-        | Div -> raise (Failure "Not implemented")
-        | Pow ->
-            if raise (Failure "Not implemented")
-            then raise (Failure "Not implemented")
-            else raise (Failure "Not implemented")
+        | Div -> Binop(Div, 
+		       Binop(Sub, Binop(Mul, e2, derivative e1), Binop(Mul, e1, derivative e2)),
+		        Binop(Mul, e2, e2))
+	| Pow -> 
+            if contains_var e1
+            then (if contains_var e2 then Binop(Mul, Binop(Pow, e1, e2), Binop(Add, 
+									       Binop(Mul, derivative e2, Unop(Ln, e1)),
+									       Binop(Div, Binop(Add, derivative e1, e2), e1)))
+		  else Binop(Pow, Binop(Mul, e1, e2), Binop(Sub, e2, Num 1.)))
+            else (if contains_var e2 then Binop(Mul, Binop(Pow, e1, e2), Unop(Ln, e1)) else Num 0.)
 ;;
 
+assert((derivative (parse "x")) = Num 1.) ;;
+assert((derivative (parse "4")) = Num 0.) ;;
+assert((derivative (parse "2^2")) = Num 0.) ;;
+assert((derivative (parse "ln(x)")) = Binop(Div, Num 1., Var));;
+assert((derivative (parse "sin(x)")) = Binop(Mul, Unop(Cos, Var), Num 1.)) ;;
+assert((evaluate (derivative (parse "2*x")) 1.) = 2.) ;;
+assert((evaluate (derivative (parse "cos(x)")) 0.) = 0.) ;;
+assert((evaluate (derivative (parse "ln(2 * x)")) 2.) = 0.5) ;;
+assert((evaluate (derivative (parse "2^x")) 3.) = 8.*.log(2.)) ;;
+assert((evaluate (derivative (parse "ln(2 * x) + cos(x)")) 2.) = 0.5 -. sin(2.)) ;;
+assert((evaluate (derivative (parse "ln(2 * x) - 2*x")) 2.) = -1.5) ;;
+
+let x = Binop(Div,Num 4.,Num 5.) ;;
+
+
 (* A helpful function for testing. See the writeup. *)
 let checkexp strs xval =
     print_string ("Checking expression: " ^ strs ^ "\n");







@@ -74,28 +134,45 @@
     )
 ;;
 
-
 (*>* Problem 2.4 *>*)
 
 (* See writeup for instructions. *)
 let rec find_zero (e:expression) (g:float) (epsilon:float) (lim:int)
     : float option =
-    raise (Failure "Not implemented")
+  let eval = evaluate e g in 
+  let deriv = evaluate (derivative e) g in 
+  if ((abs_float eval) < epsilon) then Some eval 
+  else (if (lim = 0) then None else (find_zero e (g -. (eval /. deriv)) epsilon (lim - 1)))
 ;;
 
+assert((find_zero (parse "x") 2. 0.01 1) = Some 0.) ;;
+assert((find_zero (parse "x^4") 2. 0.01 5) = None) ;;
+assert((find_zero (parse "x^(1/3)") 5. 0.01 2) = None) ;;
 
+(* Sorry, I don't really know how to test these..... *) 
 
 (*>* Problem 2.5 *>*)
 
 (* Karma problem:
  * Just leave it unimplemented if you don't want to do it.
  * See writeup for instructions. *)
-let rec find_zero_exact (e:expression) : expression option =
-    raise (Failure "Not implemented")
+(*let rec find_zero_exact (e:expression) : expression option =
+  if not (contains var e) then None 
+  else match expression with
+  | Num n -> 
+  | Var v -> 
+  | Unop (a, b) -> if a = Neg then ~-.a else None
+  | Binop (i, j, k) -> 
+    (match i with 
+    | Mul -> 
+    | Add
+    | Sub
+    | Div    ) 
+ 
 ;;
+*)
 
-
 (*>* Problem 2.6 *>*)
 
-let minutes_spent_on_part_2 : int = raise (Failure "Not implemented") ;;
+let minutes_spent_on_part_2 : int = 300 ;;
--- a/ps2/mapreduce.ml
+++ b/ps2/mapreduce.ml
@@ -31,11 +31,17 @@
 
 (*  reduce_mine : Implement reduce using List.fold_right *)
 let reduce_mine (f:'a -> 'b -> 'b) (u:'b) (xs:'a list) : 'b =
-    raise (Failure "Not implemented")
+    List.fold_right f xs u
 ;;
 
+assert((reduce_mine (fun x y -> x + y) 0 []) = 0) ;;
+assert((reduce_mine (fun x y -> x::y) [] [4; 5; 6; 7]) = 
+  (reduce (fun x y -> x::y) [] [4; 5; 6; 7])) ;;
+assert((reduce_mine (fun x y -> 1+y) 0 [1; 4; 5; 7; 10]) = 
+  reduce (fun x y -> 1+y) 0 [1; 4; 5; 7; 10]) ;;
 
 
+
 (****************************************************)
 (******       1.2: Sparking your INTerest      ******)
 (****************************************************)






@@ -56,21 +62,25 @@
 (*>* Problem 1.2.a *>*)
 
 (*  negate_all : Flips the sign of each element in a list *)
+
 let negate_all (nums:int list) : int list =
-    raise (Failure "Not implemented")
+    List.map (fun x -> (0-x)) nums
 ;;
 
-(* Unit test example. *)
+assert ((negate_all [0]) = [0]) ;;
 assert ((negate_all [1; -2; 0]) = [-1; 2; 0]) ;;
+assert ((negate_all [-4; -5; -6]) = [4; 5; 6]) ;;
 
-
 (*>* Problem 1.2.b *>*)
 
 (*  sum : Returns the sum of the elements in the list. *)
 let sum (nums:int list) : int =
-    raise (Failure "Not implemented")
+    reduce (+) 0 nums
 ;;
 
+assert((sum []) = 0) ;;
+assert((sum [1; 2; 3; 4; 5]) = 15) ;;
+assert((sum [-1; 1; -5; 3; 2]) = 0) ;;
 
 (*>* Problem 1.2.c *>*)
 















@@ -78,49 +88,85 @@
  *             Returns a one-dimensional list of ints, each int equal to the
  *             sum of the corresponding row in the input.
  *   Example : sum_rows [[1;2]; [3;4]] = [3; 7] *)
-let sum_rows (rows:int list list) : int list =
-    raise (Failure "Not implemented")
+
+let sum_rows (rows: int list list) : int list = 
+    List.map sum rows
 ;;
 
+assert((sum_rows []) = []) ;;
+assert((sum_rows [[2; 4]]) = [6]) ;;
+assert((sum_rows [[-2]; [-1; 3]]) = [-2; 2]) ;;
+assert((sum_rows [[1]; [-3]; [5]]) = [1; -3; 5]) ;;
+assert((sum_rows [[1; 2; 5]; [6; 5; 3]]) = [8; 14]) ;;
 
+
 (*>* Problem 1.2.d *>*)
 
 (*  filter_odd : Retains only the odd numbers from the given list.
  *     Example : filter_odd [1;4;5;-3] = [1;5;-3]. *)
 let filter_odd (nums:int list) : int list =
-    raise (Failure "Not implemented")
+   reduce (fun x y -> if x mod 2 = 0 then y else x::y) [] nums
 ;;
 
+assert((filter_odd []) = []) ;;
+assert((filter_odd [1]) = [1]) ;;
+assert((filter_odd [1; 2]) = [1]) ;;
+assert((filter_odd [1; -1; 3; -3]) = [1; -1; 3; -3]) ;;
+assert((filter_odd [-1; 4; 5; 2; 1999]) = [-1; 5; 1999]) ;;
 
+
 (*>* Problem 1.2.e *>*)
 
 (*  num_occurs : Returns the number of times a given number appears in a list.
  *     Example : num_occurs 4 [1;3;4;5;4] = 2 *)
+(* HOW TO HANDLE NEGATIVE NUMBERS??? *)
+
 let num_occurs (n:int) (nums:int list) : int =
-    raise (Failure "Not implemented")
+    reduce (fun x y -> if n = x then 1+y else y) 0 nums
 ;;
 
+assert((num_occurs 7 []) = 0) ;;
+assert((num_occurs 45 [5; 4; 3; (-100); 500]) = 0) ;;
+assert((num_occurs (-2) [(-2); 5]) = 1) ;;
+assert((num_occurs 4 [4; 5; 6; 4; 4]) = 3) ;;
+assert((num_occurs (-1) [(-1); 5; 6]) = 1) ;;
 
+
 (*>* Problem 1.2.f *>*)
 
-(*  super_sum : Sums all of the numbers in a list of int lists
- *    Example : super_sum [[1;2;3];[];[5]] = 11 *)
+(*  super_sum : Sums all of the numbers in a list of int lists *)
 let super_sum (nlists:int list list) : int =
-    raise (Failure "Not implemented")
+    reduce (fun x y-> sum x + y) 0 nlists
 ;;
 
+assert((super_sum [[]; []; []]) = 0) ;;
+assert((super_sum [[0]; [0]]) = 0) ;;
+assert((super_sum [[1; 2; 4]; [1;5]; []; [0; -7]]) = 6) ;;
+
 (*>* Problem 1.2.g *>*)
 
 (*  filter_range : Returns a list of numbers in the input list within a
  *                 given range (inclusive), in the same order they appeared
  *                 in the input list.
  *       Example : filter_range [1;3;4;5;2] (1,3) = [1;3;2] *)
-let filter_range (nums:int list) (range:int * int) : int list =
-    raise (Failure "Not implemented")
+
+let filter_range (nums:int list) (range:int * int) : int list =   
+    reduce (fun x y ->
+       (match range with 
+       | (a, b) -> 
+         if a <= x then 
+           (if b >= x then x::y else y)
+         else y)) [] nums
 ;;
 
+assert((filter_range [0; 0] (4,5)) = []) ;;
+assert((filter_range [0; 10; 87] (-100, -1)) = []) ;;
+assert((filter_range [5; 6] (99, 1000)) = []) ;;
+assert((filter_range [-1; 22; -50; 79] (-100, 100)) = [-1; 22; -50; 79]) ;;
 
 
+
+
 (****************************************************)
 (**********       1.3 Fun with Types       **********)
 (****************************************************)

@@ -130,9 +176,12 @@
 
 (*  floats_of_ints : Converts an int list into a list of floats *)
 let floats_of_ints (nums:int list) : float list =
-    raise (Failure "Not implemented")
+    List.map (fun x -> float_of_int x) nums
 ;;
 
+assert((floats_of_ints []) = []) ;;
+assert((floats_of_ints [1; 2; 3]) = [1.; 2.; 3.]) ;;
+assert((floats_of_ints [-1; 4400]) = [-1.; 4400.]) ;;
 
 (*>* Problem 1.3.b *>*)
 















@@ -140,45 +189,81 @@
  *            The mathematical function log10 is not defined for
  *            numbers n <= 0, so undefined results should be None.
  *  Example : log10s [1.0; 10.0; -10.0] = [Some 0.; Some 1.; None] *)
+
+
 let log10s (lst: float list) : float option list =
-    raise (Failure "Not implemented")
+    reduce (fun x y -> 
+    (if x <= 0. then  None::y else (Some (log10 x))::y)) [] lst
 ;;
 
+assert((log10s []) = []) ;;
+assert((log10s [0.; 1.]) = [None; Some 0.]) ;;
+assert((log10s [-2.; 10000.; 10.]) = [None; Some 4.; Some 1.]) ;;
 
 (*>* Problem 1.3.c *>*)
 
-(*  deoptionalize : Extracts values from a list of options.
- *        Example : deoptionalize [Some 3; None; Some 5; Some 10] = [3;5;10] *)
 let deoptionalize (lst:'a option list) : 'a list =
-    raise (Failure "Not implemented")
+    reduce (fun x y -> 
+      match x with
+      | None -> y
+      | Some a -> a::y) 
+    [] lst
 ;;
 
+assert ((deoptionalize []) = []) ;;
+assert ((deoptionalize [Some 1; None; Some 6]) = [1; 6]) ;;
+assert ((deoptionalize [None; Some 4.2; Some 6.7; None]) = [4.2; 6.7]) ;;
+assert ((deoptionalize [Some "pfoho"; None; Some "dunster"]) = ["pfoho"; "dunster"]) ;;
 
 (*>* Problem 1.3.d *>*)
 
 (*  some_sum : Sums all of the numbers in a list of int options;
  *             ignores None values *)
+
 let some_sum (nums:int option list) : int =
-    raise (Failure "Not implemented")
+    sum (deoptionalize nums)
 ;;
 
+assert ((some_sum []) = 0) ;;
+assert ((some_sum [None; None; None]) = 0) ;;
+assert ((some_sum [Some 1; None; Some 6]) = 7) ;;
+assert ((some_sum [Some (-5); Some (-10)]) = -15) ;;
 
+
 (*>* Problem 1.3.e *>*)
 
 (*  mult_odds : Product of all of the odd members of a list.
  *    Example : mult_odds [1;3;0;2;-5] = -15 *)
+
 let mult_odds (nums:int list) : int =
-    raise (Failure "Not implemented")
+  let odd_nums = filter_odd nums in 
+    match odd_nums with 
+    | [] -> 0
+    | _ -> reduce ( * ) 1 odd_nums
 ;;
 
+assert((mult_odds []) = 0) ;;
+assert((mult_odds [3; 7]) = 21) ;;
+assert((mult_odds [1;3;0;2;-5]) = -15) ;;
+assert((mult_odds [2; 4; 8]) = 0) ;;
+assert((mult_odds [-15; -3]) = 45) ;;
 
 (*>* Problem 1.3.f *>*)
 
+(*
 (*  concat : Concatenates a list of lists. See the Ocaml library ref *)
 let concat (lists:'a list list) : 'a list =
-    raise (Failure "Not implemented")
+    reduce (fun x y -> 
+    (match x with 
+    | hd::tl -> (reduce (fun x y -> x::y) [] x)::y
+    | [] -> y
+    )) [] lists
 ;;
 
+assert((concat [[]]) = []) ;; 
+assert((concat [[1]; [2]]) = [1; 2]) ;;
+assert((concat [[1; 2]; [3; 2]]) = [1; 2; 3; 2]) ;;
+*)
 
 (*>* Problem 1.3.g *>*)
 


@@ -190,15 +275,27 @@
 (*  filter_by_year : returns the names of the students in a given year
  *         Example : let students = [("Joe",2010);("Bob",2010);("Tom",2013)];;
  *                   filter_by_year students 2010 => ["Joe";"Bob"] *)
-let filter_by_year (slist:student list) (yr:year) : name list =
-    raise (Failure "Not implemented")
+
+let filter_by_year (slist: student list) (yr:year) : name list =   
+    reduce (fun x y ->
+       (match x with 
+       | (a, b) -> 
+         if b = yr then 
+           a::y else y
+       )) [] slist
 ;;
 
+let students = [("Emi", 2010); ("Borys", 2015)] ;;
+assert((filter_by_year [("Emi", 2010); ("Borys", 2015)] 2010) = ["Emi"]);;
+assert((filter_by_year [("Emi", 2010); ("Borys", 2015)] 2011) = []) ;;
+assert((filter_by_year [] 2013) = []) ;;  
+assert((filter_by_year [("Emily", -12); ("Doris", -12); ("Jessica", 2013)] (-12)) = ["Emily"; "Doris"]) ;;
+assert((filter_by_year [("Emily", -12); ("Doris", -12); ("Jessica", 2013)] 2013) = ["Jessica"]) ;;
 
 (*>* Problem 1.4 *>*)
 
 (* Please give us an honest estimate of how long this Part of the problem
  * set took you to complete.  We care about your responses and will use
  * them to help guide us in creating future assignments. *)
-let minutes_spent_on_part_1 : int = raise (Failure "Not implemented") ;;
+let minutes_spent_on_part_1 : int = 300 ;;